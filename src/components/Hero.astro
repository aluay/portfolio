<section class="hero section" aria-label="Introduction">
	<div class="container arrow">
		<header class="hero-content">
			<h1 class="text-display fade-in text-feature text-balance" id="hero-name">
				<span class="name-line">
					<span class="letter">A</span><span class="letter">b</span><span
						class="letter">d</span
					><span class="letter">u</span><span class="letter">l</span><span
						class="letter">l</span
					><span class="letter">a</span><span class="letter">h</span>
				</span>

				<span class="name-line">
					<span class="letter">L</span><span class="letter">u</span><span
						class="letter">a</span
					><span class="letter">y</span>
				</span>
			</h1>
			<p
				class="text-body mt-xl fade-in stagger-1"
				style="color: var(--text-secondary); max-width: 500px;"
			>
				I'm a web developer who has a knack for crafting digital interfaces with
				precision, elegance, and attention to detail.
			</p>
		</header>
		<div class="hero-meta mt-xl fade-in stagger-3">
			<div class="meta-grid grid grid-2 gap-xl">
				<div class="meta-item">
					<span class="meta-label">Coordinates</span>
					<div class="status-container mt-xs">
						<span class="meta-content" data-logo-hover="portland"
							>Portland, OR</span
						>
					</div>
				</div>
				<div class="meta-item">
					<span class="meta-label">Current Focus</span>
					<div class="status-container mt-xs">
						<span class="status-dot" id="pulse-dot"></span>
						<span class="meta-content" data-logo-hover="hci"
							>Learning Human&#8211;Computer Interaction</span
						>
					</div>
				</div>
				<div class="meta-item">
					<span class="meta-label">Presence</span>
					<nav class="social-links mt-xs" aria-label="Social media links">
						<a
							href="https://www.linkedin.com/in/abdullah-luay/"
							target="_blank"
							rel="noopener noreferrer"
							class="social-link"
							data-logo-hover="linkedin"
							aria-label="LinkedIn profile"
						>
							LinkedIn
						</a>
						<span class="social-separator">Â·</span>
						<a
							href="https://github.com/aluay"
							target="_blank"
							rel="noopener noreferrer"
							class="social-link"
							data-logo-hover="github"
							aria-label="GitHub profile"
						>
							GitHub
						</a>
					</nav>
				</div>
			</div>
		</div>
	</div>
</section>

<style>
	/* Hero Layout */
	.hero {
		min-height: 100vh;
		display: flex;
		align-items: center;
	}
	.hero-content {
		text-align: left;
	}
	.hero h1 {
		position: relative;
		line-height: 0.9;
		font-size: clamp(6rem, 14vw, 12rem);
	}

	.hero h1 .letter {
		display: inline-block;
		font-variation-settings:
			"wght" 200,
			"opsz" 144;
		transition: font-variation-settings 0.05s cubic-bezier(0.4, 0, 0.2, 1);
		will-change: font-variation-settings;
		/* Prevent layout shifts using transform instead of width changes */
		position: relative;
		transform-origin: center;
		/* Use CSS containment to prevent layout shifts */
		contain: layout;
	}
	.hero h1 .name-line {
		display: flex;
		white-space: nowrap;
		/* Prevent line breaks and maintain natural spacing */
		overflow: visible;
		/* Use flexbox to maintain natural letter spacing */
		align-items: baseline;
	}

	/* Meta Section */
	.meta-grid {
		border-top: 1px solid var(--border);
		padding-top: var(--spacing-xl);
		grid-template-columns: 1fr 1fr;
	}

	.meta-item {
		display: flex;
		flex-direction: column;
	}

	/* Status Indicator */
	.status-container {
		display: flex;
		align-items: center;
		gap: 8px;
	}
	/* Status Dot Animation */
	.status-dot {
		display: inline-block;
		width: 6px;
		height: 6px;
		border-radius: 50%;
		background: #10b981;
		animation: pulse-colors 4s ease-in-out infinite;
		position: relative;
		flex-shrink: 0;
	}

	.status-dot::before {
		content: "";
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		width: 100%;
		height: 100%;
		border-radius: 50%;
		background: inherit;
		animation: pulse-ring 4s ease-in-out infinite;
	}

	@keyframes pulse-colors {
		0% {
			background: #10b981;
			box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.4);
		}
		20% {
			background: #3b82f6;
			box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.2);
		}
		40% {
			background: #8b5cf6;
			box-shadow: 0 0 0 6px rgba(139, 92, 246, 0.1);
		}
		60% {
			background: #f59e0b;
			box-shadow: 0 0 0 4px rgba(245, 158, 11, 0.2);
		}
		80% {
			background: #ef4444;
			box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.3);
		}
		100% {
			background: #10b981;
			box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.4);
		}
	}

	@keyframes pulse-ring {
		0% {
			transform: translate(-50%, -50%) scale(1);
			opacity: 0.8;
		}
		50% {
			transform: translate(-50%, -50%) scale(2);
			opacity: 0.2;
		}
		100% {
			transform: translate(-50%, -50%) scale(1);
			opacity: 0.8;
		}
	} /* Meta Content Styling */
	.meta-label {
		color: var(--text-tertiary);
		font-weight: 400;
		text-transform: uppercase;
		letter-spacing: 0.05em;
		font-size: clamp(0.65rem, 1vw, 0.75rem);
	}

	.meta-content {
		color: var(--text-secondary);
		font-weight: 400;
		margin: 0;
		font-size: clamp(0.65rem, 1vw, 0.75rem);
	}

	/* Social Links Styling */
	.social-links {
		display: flex;
		align-items: center;
		gap: 0.5ch;
	}

	.social-link {
		color: var(--text-secondary);
		text-decoration: none;
		font-weight: 400;
		transition: color 0.2s ease;
		font-size: clamp(0.65rem, 1vw, 0.75rem);
	}

	.social-link:hover {
		color: var(--text-primary);
	}

	.social-separator {
		color: var(--text-tertiary);
		font-weight: 300;
		font-size: 0.9em;
		animation: breathe 3s ease-in-out infinite;
		animation-delay: 1.5s;
		opacity: 0.6;
	}

	@keyframes breathe {
		0%,
		100% {
			transform: scale(1);
			opacity: 0.6;
		}
		50% {
			transform: scale(1.2);
			opacity: 0.9;
		}
	}
	/* Hero Tech Links */
	:global(.hero-tech-link) {
		color: var(--text-primary);
		font-weight: 500;
		text-decoration: none;
		border-bottom: 1px solid var(--text-tertiary);
		transition: all 0.2s ease;
		cursor: pointer;
	}

	:global(.hero-tech-link:hover) {
		border-bottom-color: var(--text-primary);
	} /* Responsive Design */
	@media (max-width: 768px) {
		.hero {
			text-align: left;
			min-height: 100vh;
			justify-content: center;
			padding-top: var(--spacing-xl);
		}
		.hero h1 .name-line {
			/* Maintain flexbox layout on mobile for stable letter spacing */
			display: flex;
			white-space: nowrap;
			overflow: visible;
			align-items: baseline;
			justify-content: flex-start;
		}

		.meta-grid {
			grid-template-columns: 1fr;
			gap: var(--spacing-lg);
			text-align: left;
		}
		.hero h1::after {
			left: 0;
			transform: none;
		}
	}

	@media (max-width: 480px) {
		.hero {
			min-height: 90vh;
			padding-top: var(--spacing-lg);
		}
	}
</style>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const heroName = document.getElementById("hero-name") as HTMLElement;
		if (!heroName) return;

		const letters = heroName.querySelectorAll(
			".letter"
		) as NodeListOf<HTMLElement>;
		if (letters.length === 0) return;

		// Proximity effect configuration
		const config = {
			minWeight: 200,
			maxWeight: 900,
			minOpticalSize: 100,
			maxOpticalSize: 144,
			maxDistance: 120,
			updateThrottle: 8,
		};

		// Track current weights for smooth transitions
		const letterWeights: number[] = new Array(letters.length).fill(
			config.minWeight
		);
		let lastUpdateTime = 0;

		// Calculate distance from cursor to element center
		function getDistanceToElement(
			mouseX: number,
			mouseY: number,
			element: HTMLElement
		): number {
			const rect = element.getBoundingClientRect();
			const centerX = rect.left + rect.width / 2;
			const centerY = rect.top + rect.height / 2;
			const deltaX = mouseX - centerX;
			const deltaY = mouseY - centerY;
			return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
		}

		// Map distance to font variations with exponential falloff
		function distanceToVariations(distance: number): {
			weight: number;
			opticalSize: number;
		} {
			if (distance >= config.maxDistance) {
				return { weight: config.minWeight, opticalSize: config.minOpticalSize };
			}

			const normalizedDistance = distance / config.maxDistance;
			const easedDistance = 1 - Math.pow(normalizedDistance, 1.5);

			const weight = Math.round(
				config.minWeight + (config.maxWeight - config.minWeight) * easedDistance
			);

			const opticalSize = Math.round(
				config.minOpticalSize +
					(config.maxOpticalSize - config.minOpticalSize) * easedDistance
			);

			return { weight, opticalSize };
		}

		// Update all letters based on cursor position
		function updateLetters(mouseX: number, mouseY: number): void {
			letters.forEach((letter, index) => {
				const distance = getDistanceToElement(mouseX, mouseY, letter);
				const variations = distanceToVariations(distance);

				if (Math.abs(letterWeights[index] - variations.weight) > 5) {
					letterWeights[index] = variations.weight;
					letter.style.fontVariationSettings = `"wght" ${variations.weight}, "opsz" ${variations.opticalSize}`;
				}
			});
		}

		// Reset all letters to minimum weight
		function resetLetters(): void {
			letters.forEach((letter, index) => {
				letterWeights[index] = config.minWeight;
				letter.style.fontVariationSettings = `"wght" ${config.minWeight}, "opsz" ${config.minOpticalSize}`;
			});
		}

		// Event handlers
		let isUpdating = false;
		function handleMouseMove(e: MouseEvent): void {
			if (isUpdating) return;
			isUpdating = true;

			const currentTime = performance.now();
			if (currentTime - lastUpdateTime >= config.updateThrottle) {
				updateLetters(e.clientX, e.clientY);
				lastUpdateTime = currentTime;
			}

			requestAnimationFrame(() => {
				isUpdating = false;
			});
		}

		function handleTouchMove(e: TouchEvent): void {
			if (e.touches.length > 0) {
				const touch = e.touches[0];
				updateLetters(touch.clientX, touch.clientY);
			}
		}

		// Event listeners
		document.addEventListener("mousemove", handleMouseMove, { passive: true });
		document.addEventListener("mouseleave", resetLetters, { passive: true });
		document.addEventListener("touchmove", handleTouchMove, { passive: true });
		document.addEventListener("touchend", resetLetters, { passive: true });

		// Performance optimization: pause updates when page is hidden
		document.addEventListener("visibilitychange", () => {
			if (document.hidden) {
				resetLetters();
			}
		});

		// Cleanup on page unload
		window.addEventListener("beforeunload", () => {
			document.removeEventListener("mousemove", handleMouseMove);
			document.removeEventListener("mouseleave", resetLetters);
			document.removeEventListener("touchmove", handleTouchMove);
			document.removeEventListener("touchend", resetLetters);
		});
	});
</script>

<!-- Simple Logo Hover System -->
<script is:inline src="/js/simple-logo-hover.js"></script>
